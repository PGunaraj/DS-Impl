class Node:
	def __init__(self,v):
		self.val=v
		self.next=None

class LL:
	def __init__(self):
		self.head=None
	def isEmpty(self):
		return self.head==None
	def insertAtStart(self,v):
		node=Node(v)
		node.next=self.head
		self.head=node
	def insertAtEnd(self,v):
		current=self.head
		prev=self.head
		while current!=None:
			prev=current
			current=current.next
		node=Node(v)
		prev.next=node
	def insertAtPos(self,v,pos):
		current=self.head
		prev=self.head
		c=1
		while c<pos:
			prev=current
			current=current.next
			c+=1
		node=Node(v)
		prev.next=node
		node.next=current
	def printLL(self):
		current=self.head
		while current!=None:
			print(current.val,end=" ")
			current=current.next
		print()
	def deleteAtStart(self):
		current=self.head
		self.head=current.next
		print(current.val)
	def deleteAtEnd(self):
		current=self.head
		prev=self.head
		while current.next!=None:
			prev=current
			current=current.next
		prev.next=None
		print(current.val)
	def deleteAtPos(self,pos):
		current=self.head
		prev=self.head
		c=1
		while c<pos and current.next!=None:
			prev=current
			current=current.next
			c+=1
		if c==pos:
			prev.next=current.next
			print(current.val)
	def size(self):
		current=self.head
		c=0
		while current!=None:
			c+=1
			current=current.next
		return c
	def insertAtMiddle(self,v):
		pos=(self.size()//2)+1
		self.insertAtPos(v,pos)
	def deleteAtMiddle(self):
		pos=(self.size()//2)+1
		self.deleteAtPos(pos)
	def find(self,v):
		current=self.head
		found=False
		while current!=None:
			if current.val==v:
				found=True
				break
			current=current.next
		return found
	def findAtPos(self,pos):
		current=self.head
		c=1
		found=False
		while current!=None:
			if c==pos:
				found=True
				break
			c+=1
			current=current.next
		return found

l=LL()
l.insertAtStart(2)
l.insertAtStart(1)
l.insertAtEnd(4)
l.insertAtPos(3,3)
print(l.findAtPos(2))
l.printLL()
l.deleteAtPos(3)
l.deleteAtEnd()
l.deleteAtStart()
l.deleteAtPos(2)
l.insertAtPos(5,2)
l.size()
l.insertAtMiddle(3)
l.printLL()
l.deleteAtMiddle()
print(l.find(3))
